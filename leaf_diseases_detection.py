# -*- coding: utf-8 -*-
"""Leaf-diseases-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p56zamGJmk7g94haJFs_xj3sPOMxOcNA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D

data_dir = "C:/Users/hp/Desktop/plant disesase/plant disesase/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)"
train_dir = os.path.join(data_dir, "train")
valid_dir = os.path.join(data_dir, "valid")
test_dir = "C:/Users/hp/Desktop/plant disesase/plant disesase/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/test/test"

diseases = os.listdir(train_dir)

print(diseases)
print("Total disease classes are: {}".format(len(diseases)))

import os

plants = []
NumberOfDiseases = 0
for plant in diseases:
    if plant.split('___')[0] not in plants:
        plants.append(plant.split('___')[0])
    if plant.split('___')[1] != 'healthy':
        NumberOfDiseases += 1

print(f"Unique Plants are: \n{plants}")
print("Number of plants: {}".format(len(plants)))
print("Number of diseases: {}".format(NumberOfDiseases))

nums = {}
for disease in diseases:
    nums[disease] = len(os.listdir(os.path.join(train_dir, disease)))

img_per_class = pd.DataFrame(nums.values(), index=nums.keys(), columns=["no. of images"])

plt.figure(figsize=(20, 5))
plt.bar(img_per_class.index, img_per_class['no. of images'])
plt.xlabel('Plants/Diseases', fontsize=10)
plt.ylabel('No of images available', fontsize=10)
plt.xticks(rotation=90)
plt.title('Images per each class of plant disease')
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(img_per_class.T, cmap='coolwarm', annot=True, fmt="d")
plt.title('Heatmap of Image Counts per Class')
plt.xlabel('Plants/Diseases')
plt.ylabel('No of images available')
plt.xticks(rotation=90)
plt.show()

n_train = sum(nums.values())
print(f"There are {n_train} images for training")



train_datagen = ImageDataGenerator(rescale=1./255)
valid_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

valid_generator = valid_datagen.flow_from_directory(
    valid_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

def show_batch(data_gen):
    images, labels = next(data_gen)
    plt.figure(figsize=(10, 10))
    for i in range(25):
        plt.subplot(5, 5, i+1)
        plt.imshow(images[i])
        plt.title(np.argmax(labels[i]))
        plt.axis('off')
    plt.show()

show_batch(train_generator)

plt.figure(figsize=(10, 6))
labels_count = train_generator.classes
sns.countplot(labels_count)
plt.title('Distribution of Labels in Training Data')
plt.xlabel('Labels')
plt.ylabel('Count')
plt.show()

sample_images, _ = next(train_generator)
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(sample_images[i])
    plt.axis('off')
plt.show()

resnet_model = Sequential([
    ResNet50(include_top=False, pooling='avg', weights='imagenet'),
    Dense(25, activation='softmax')
])

resnet_model.layers[0].trainable = False

resnet_model.compile(optimizer='adam',
                     loss='categorical_crossentropy',
                     metrics=['accuracy'])

resnet_history = resnet_model.fit(
    train_generator,
    steps_per_epoch=n_train // 32,
    epochs=10,
    validation_data=valid_generator,
    validation_steps=len(valid_generator)
)

from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.layers import GlobalAveragePooling2D
cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(len(diseases), activation='softmax')
])

cnn_model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

cnn_history = cnn_model.fit(
    train_generator,
    steps_per_epoch=n_train // 32,
    epochs=20,
    validation_data=valid_generator,
    validation_steps=len(valid_generator)
)

# Evaluate ResNet50 model on training data
train_loss, train_accuracy = resnet_model.evaluate(train_generator)
print(f"Training Accuracy (ResNet50): {train_accuracy}")

# Evaluate ResNet50 model on test data
test_loss, test_accuracy = resnet_model.evaluate(valid_generator)
print(f"Test Accuracy (ResNet50): {test_accuracy}")

# Evaluate CNN model on training data
train_loss, train_accuracy = cnn_model.evaluate(train_generator)
print(f"Training Accuracy (CNN): {train_accuracy}")

# Evaluate CNN model on test data
test_loss, test_accuracy = cnn_model.evaluate(valid_generator)
print(f"Test Accuracy (CNN): {test_accuracy}")

from keras.layers import Flatten
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Define the ResNet50 model
resnet = ResNet50(include_top=False, pooling='avg', weights='imagenet')
n_valid = sum([len(files) for r, d, files in os.walk(valid_dir)])

# Extract features using ResNet50
def extract_features(directory, sample_count):
    features = np.zeros((sample_count, 2048))  # ResNet50 has 2048-dimensional features
    labels = np.zeros(sample_count)
    datagen = ImageDataGenerator(rescale=1./255)
    generator = datagen.flow_from_directory(
        directory,
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical'
    )
    i = 0
    for inputs_batch, labels_batch in generator:
        features_batch = resnet.predict(inputs_batch)  # Correctly use the resnet variable
        features[i * 32 : (i + 1) * 32] = features_batch
        labels[i * 32 : (i + 1) * 32] = np.argmax(labels_batch, axis=1)
        i += 1
        if i * 32 >= sample_count:
            break
    return features, labels

# Extract features for the training and validation data
train_features, train_labels = extract_features(train_dir, n_train)
valid_features, valid_labels = extract_features(valid_dir, n_valid)

# Train a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(train_features, train_labels)

# Evaluate the Random Forest classifier
train_predictions = rf_classifier.predict(train_features)
valid_predictions = rf_classifier.predict(valid_features)

# Print classification report and accuracy
print("Training Set Metrics:")
print(classification_report(train_labels, train_predictions))
print("Training Set Accuracy:", accuracy_score(train_labels, train_predictions))

print("\nValidation Set Metrics:")
print(classification_report(valid_labels, valid_predictions))
print("Validation Set Accuracy:", accuracy_score(valid_labels, valid_predictions))

import matplotlib.pyplot as plt

# Plot Bar Plot for Accuracy Comparison
classifiers = ['ResNet50', 'CNN', 'Random Forest']
accuracies = [test_accuracy, test_accuracy, accuracy_score(valid_labels, valid_predictions)]

plt.figure(figsize=(10, 6))
plt.bar(classifiers, accuracies, color='skyblue')
plt.xlabel('Classifiers')
plt.ylabel('Accuracy')
plt.title('Accuracy Comparison of Different Classifiers')
plt.ylim(0, 1)
plt.show()

from tensorflow.keras.preprocessing import image
import numpy as np

# Load the image
leaf_img_path = "C:/Users/hp/Desktop/plant disesase/plant disesase/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/test/test/AppleCedarRust2.JPG"
leaf_img = image.load_img(leaf_img_path, target_size=(150, 150))  # Resize the image to match the input size of your models

# Convert the image to a numpy array and preprocess it
leaf_array = image.img_to_array(leaf_img)
leaf_array = np.expand_dims(leaf_array, axis=0)
leaf_array /= 255.  # Normalize pixel values

# Use ResNet50 model to make predictions
resnet_predictions = resnet_model.predict(leaf_array)
resnet_predicted_class = np.argmax(resnet_predictions)

# Use CNN model to make predictions
cnn_predictions = cnn_model.predict(leaf_array)
cnn_predicted_class = np.argmax(cnn_predictions)

# Use Random Forest classifier to make predictions
rf_features = resnet.predict(leaf_array)
rf_predicted_class = rf_classifier.predict(rf_features)

# Print predictions
#print("ResNet50 predicted class:", resnet_predicted_class)
print("CNN predicted class:", cnn_predicted_class)
#print("Random Forest predicted class:", rf_predicted_class)

# Display the image
plt.imshow(leaf_img)
plt.axis('off')
plt.show()

